version: '3.8'

services:
  # Main application service
  bookstore:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: online-bookstore
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=sqlite:///data/bookstore.db
      - EMAIL_ENABLED=true
      - PAYMENT_TEST_MODE=true
    volumes:
      - .:/app
      - bookstore_data:/app/data
      - bookstore_logs:/app/logs
    networks:
      - bookstore-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Testing service
  bookstore-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: online-bookstore-test
    environment:
      - FLASK_ENV=testing
      - SECRET_KEY=test-secret-key
      - DATABASE_URL=sqlite:///data/test_bookstore.db
    volumes:
      - .:/app
      - test_data:/app/data
    networks:
      - bookstore-network
    command: ["python", "run_refactored_tests.py"]
    profiles:
      - testing

  # Production service
  bookstore-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: online-bookstore-prod
    ports:
      - "8080:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - SECRET_KEY=${SECRET_KEY:-prod-secret-key-change-me}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/bookstore.db}
      - EMAIL_ENABLED=${EMAIL_ENABLED:-true}
      - PAYMENT_TEST_MODE=${PAYMENT_TEST_MODE:-false}
    volumes:
      - prod_data:/app/data
      - prod_logs:/app/logs
    networks:
      - bookstore-network
    restart: unless-stopped
    profiles:
      - production

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: bookstore-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bookstore-network
    restart: unless-stopped
    profiles:
      - cache

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: bookstore-postgres
    environment:
      - POSTGRES_DB=bookstore
      - POSTGRES_USER=bookstore
      - POSTGRES_PASSWORD=bookstore_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bookstore-network
    restart: unless-stopped
    profiles:
      - database

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: bookstore-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - bookstore
    networks:
      - bookstore-network
    restart: unless-stopped
    profiles:
      - proxy

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bookstore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bookstore-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bookstore-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - bookstore-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  bookstore_data:
    driver: local
  bookstore_logs:
    driver: local
  test_data:
    driver: local
  prod_data:
    driver: local
  prod_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bookstore-network:
    driver: bridge
