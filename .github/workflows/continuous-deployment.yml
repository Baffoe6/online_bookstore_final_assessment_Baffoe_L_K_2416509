name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_IMAGE: bookstore/online-bookstore
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Pre-deployment validation
  pre-deploy-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      deploy_env: ${{ steps.env.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine deployment environment
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract version
      id: version
      run: |
        VERSION=$(date +%Y%m%d)-${GITHUB_SHA::7}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deployment version: $VERSION"
    
    - name: Validate deployment readiness
      run: |
        echo "✅ Code checked out"
        echo "✅ Version: ${{ steps.version.outputs.version }}"
        echo "✅ Environment: ${{ steps.env.outputs.environment }}"
        echo "✅ Ready for deployment"

  # Job 2: Build and push Docker image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ needs.pre-deploy-checks.outputs.version }}
          ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build summary
      run: |
        echo "::notice title=Docker Build::Image built and pushed: ${{ needs.pre-deploy-checks.outputs.version }}"

  # Job 3: Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push]
    if: needs.pre-deploy-checks.outputs.deploy_env == 'staging' || needs.pre-deploy-checks.outputs.deploy_env == 'production'
    environment:
      name: staging
      url: https://staging.bookstore.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.pre-deploy-checks.outputs.version }} to staging..."
        # Add deployment commands (e.g., kubectl, docker-compose, etc.)
        # docker-compose -f docker-compose.staging.yml pull
        # docker-compose -f docker-compose.staging.yml up -d
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 10
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # curl -f https://staging.bookstore.example.com/health || exit 1
        # pytest tests/smoke/ || exit 1
    
    - name: Deployment success
      run: |
        echo "::notice title=Staging Deployment::Successfully deployed to staging"

  # Job 4: Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push, deploy-staging]
    if: needs.pre-deploy-checks.outputs.deploy_env == 'production'
    environment:
      name: production
      url: https://bookstore.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.pre-deploy-checks.outputs.version }} to production..."
        # Add production deployment commands
        # kubectl set image deployment/bookstore bookstore=${{ env.DOCKER_IMAGE }}:${{ needs.pre-deploy-checks.outputs.version }}
        # kubectl rollout status deployment/bookstore
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Production health checks
    
    - name: Notify deployment
      run: |
        echo "::notice title=Production Deployment::Successfully deployed to production"
    
    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment ${{ needs.pre-deploy-checks.outputs.version }}'
          })

  # Job 5: Post-deployment verification
  post-deploy:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: success()
    
    steps:
    - name: Verify deployment health
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands
    
    - name: Monitor metrics
      run: |
        echo "Monitoring application metrics..."
        # Add monitoring setup
    
    - name: Post-deploy summary
      run: |
        echo "::notice title=Post-Deploy::All verification checks passed"

