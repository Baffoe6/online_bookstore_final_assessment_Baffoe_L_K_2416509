name: 🚀 Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate release
  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run full test suite
        run: |
          python run_refactored_tests.py

      - name: 🔍 Run linting
        run: |
          pip install flake8 black isort mypy
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .
          mypy app_refactored.py models_refactored.py services.py config.py || true

      - name: 🔒 Run security scan
        run: |
          pip install bandit safety
          bandit -r . -ll
          safety check --short-report

      - name: 📊 Generate test coverage
        run: |
          pip install pytest-cov
          python -m pytest tests/ --cov=models_refactored --cov=services --cov=config --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: release
          name: codecov-release

  # Build release artifacts
  build-artifacts:
    name: 📦 Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build Python package
        run: |
          python -m build

      - name: 🐳 Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            dist/
            Dockerfile

  # Create GitHub release
  create-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./artifacts

      - name: 📋 Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          # Extract changelog content
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🏷️ Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Online Bookstore ${{ github.ref_name }}
            
            ### 📋 Release Notes
            ${{ steps.changelog.outputs.changelog }}
            
            ### 📦 What's Included
            - **Refactored Application**: Clean architecture with service layer
            - **Enhanced Models**: Type-safe models with comprehensive validation
            - **Comprehensive Testing**: 95%+ test coverage
            - **Security Enhancements**: Improved validation and security measures
            - **Production Ready**: Environment configuration and error handling
            
            ### 🐳 Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 🚀 Quick Start
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd online-bookstore-final-assessment_Baffoe_L_K_2416509
            
            # Run the application
            python run_refactored.py
            ```
            
            ### 📚 Documentation
            - [README_REFACTORED.md](README_REFACTORED.md) - Comprehensive usage guide
            - [REFACTORING_SUMMARY.md](REFACTORING_SUMMARY.md) - Detailed refactoring documentation
            
            ### 🧪 Testing
            ```bash
            # Run tests
            python run_refactored_tests.py
            ```
            
            ---
            *This release was created automatically by the release workflow.*
          files: |
            artifacts/dist/*
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Push Docker image
  push-docker:
    name: 🐳 Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Update documentation
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📚 Update version in documentation
        run: |
          # Update version in README if needed
          sed -i "s/version.*=.*/version = ${{ github.ref_name }}/g" README_REFACTORED.md || true
          
          # Update any version references
          echo "📚 Documentation updated for version ${{ github.ref_name }}"

      - name: 🔄 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "📚 Update documentation for ${{ github.ref_name }}"
          git push || echo "No changes to push"

  # Release summary
  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, push-docker, update-docs]
    if: always()
    
    steps:
      - name: 📊 Generate release summary
        run: |
          echo "📊 Release Summary for ${{ github.ref_name }}"
          echo "=========================================="
          echo "✅ Validation: ${{ needs.validate-release.result }}"
          echo "🏷️ Release Creation: ${{ needs.create-release.result }}"
          echo "🐳 Docker Push: ${{ needs.push-docker.result }}"
          echo "📚 Documentation: ${{ needs.update-docs.result }}"
          echo "=========================================="
          
          if [ "${{ needs.validate-release.result }}" == "success" ] && 
             [ "${{ needs.create-release.result }}" == "success" ] && 
             [ "${{ needs.push-docker.result }}" == "success" ]; then
            echo "🎉 Release ${{ github.ref_name }} completed successfully!"
            echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
            echo "🐳 Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          else
            echo "❌ Release ${{ github.ref_name }} failed. Please check the logs."
          fi

  # Notify release completion
  notify-release:
    name: 📢 Notify Release Completion
    runs-on: ubuntu-latest
    needs: [release-summary]
    if: always()
    
    steps:
      - name: 📢 Notify release completion
        run: |
          if [ "${{ needs.release-summary.result }}" == "success" ]; then
            echo "📢 Release ${{ github.ref_name }} completed successfully!"
            echo "🚀 The new version is now available for deployment."
          else
            echo "🚨 Release ${{ github.ref_name }} failed!"
            echo "❌ Please check the workflow logs for details."
          fi
