name: 🚀 Simple CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Quick validation
  quick-validation:
    name: 🔍 Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🎨 Code formatting check (Black)
      run: black --check --diff .
    
    - name: 📋 Import sorting check (isort)
      run: isort --check-only --diff . --profile black
    
    - name: 🔍 Quick syntax check
      run: python -m py_compile app_refactored.py models_refactored.py services.py config.py

  # Testing
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run core tests
      run: |
        python -m pytest tests/test_refactored_models.py tests/test_refactored_services.py -v --tb=short
    
    - name: 🧪 Run performance tests
      run: |
        python -m pytest tests/test_performance.py -v --tb=short
    
    - name: 🧪 Run integration tests
      run: |
        python -m pytest tests/test_app_integration.py -v --tb=short || echo "Integration tests skipped"
    
    - name: 🧪 Run edge case tests
      run: |
        python -m pytest tests/test_edge_cases.py -v --tb=short || echo "Edge case tests skipped"

  # Security check
  security:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: 🔒 Security scan (Bandit)
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: 🔒 Dependency check (Safety)
      run: safety check --json --output safety-report.json || true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Application startup test
  startup-test:
    name: 🚀 Application Startup Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🚀 Test application startup
      run: |
        python -c "
import sys
sys.path.insert(0, '.')
try:
    from app_refactored import app
    print('✅ Flask app imports successfully')
    print('✅ App configuration loaded')
    print('✅ All routes registered')
    print('✅ Application startup test passed')
except Exception as e:
    print(f'❌ Application startup failed: {e}')
    sys.exit(1)
"

  # Performance check
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⚡ Run performance comparison
      run: |
        python performance_comparison.py

  # Final status check
  ci-success:
    name: 🎉 CI Success
    runs-on: ubuntu-latest
    needs: [quick-validation, test, security, startup-test, performance-check]
    if: always()
    
    steps:
    - name: 📊 Check all jobs status
      run: |
        if [[ "${{ needs.quick-validation.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.startup-test.result }}" == "success" && \
              "${{ needs.performance-check.result }}" == "success" ]]; then
          echo "🎉 All CI checks passed!"
          echo "✅ Quick validation: ${{ needs.quick-validation.result }}"
          echo "✅ Tests: ${{ needs.test.result }}"
          echo "✅ Security: ${{ needs.security.result }}"
          echo "✅ Startup test: ${{ needs.startup-test.result }}"
          echo "✅ Performance: ${{ needs.performance-check.result }}"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "  Quick validation: ${{ needs.quick-validation.result }}"
          echo "  Tests: ${{ needs.test.result }}"
          echo "  Security: ${{ needs.security.result }}"
          echo "  Startup test: ${{ needs.startup-test.result }}"
          echo "  Performance: ${{ needs.performance-check.result }}"
          exit 1
        fi
