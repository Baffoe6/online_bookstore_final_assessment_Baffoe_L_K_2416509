name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint bandit safety
          pip install -r requirements.txt || pip install flask werkzeug flask-WTF pytest pytest-cov coverage bcrypt bandit safety mypy black isort flake8 pylint

      - name: 🎨 Code formatting check (Black)
        run: black --check --diff .

      - name: 📋 Import sorting check (isort)
        run: isort --check-only --diff .

      - name: 🔍 Linting (Flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🔍 Advanced linting (Pylint)
        run: pylint --fail-under=8.0 app_refactored.py models_refactored.py services.py config.py

      - name: 🔒 Security check (Bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 🔒 Dependency security check (Safety)
        run: safety check --json --output safety-report.json || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Type Checking
  type-check:
    name: 🔤 Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          pip install -r requirements.txt

      - name: 🔤 Type checking (MyPy)
        run: mypy --config-file mypy.ini . || true

  # Testing
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install -r requirements.txt || pip install flask werkzeug flask-WTF pytest pytest-cov coverage bcrypt bandit safety mypy black isort flake8 pylint

      - name: 🧪 Run tests with coverage
        run: |
          pytest tests/ \
            --cov=models_refactored \
            --cov=services \
            --cov=config \
            --cov-report=xml \
            --junitxml=test-results.xml \
            -v

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            test-results.xml
            test-report.html
            htmlcov/

  # Performance Testing
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark
          pip install -r requirements.txt

      - name: ⚡ Run performance tests
        run: |
          pytest tests/ -k "performance" --benchmark-only --benchmark-save=performance-report || true

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: .benchmarks/

  # Build and Test Docker Image
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: online-bookstore:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🧪 Test Docker image
        run: |
          docker run --rm -d --name test-container -p 5000:5000 online-bookstore:latest
          sleep 10
          curl -f http://localhost:5000 || exit 1
          docker stop test-container

  # Security Scanning
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt

      - name: 🔒 Run Bandit security scan
        run: bandit -r . -f json -o bandit-report.json

      - name: 🔒 Run Safety dependency check
        run: safety check --json --output safety-report.json

      - name: 🔒 Run Semgrep security scan
        run: semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Code Quality Gate
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security]
    if: always()
    steps:
      - name: 📊 Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ Tests passed"

      - name: 📊 Check linting results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Linting failed"
            exit 1
          fi
          echo "✅ Linting passed"

      - name: 📊 Check security results
        run: |
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ Security scan passed"

      - name: 🎉 Quality gate passed
        run: echo "🎉 All quality checks passed! Ready for deployment."

  # Notify on completion
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: 📢 Notify success
        if: needs.quality-gate.result == 'success'
        run: echo "🎉 CI Pipeline completed successfully!"

      - name: 📢 Notify failure
        if: needs.quality-gate.result == 'failure'
        run: echo "❌ CI Pipeline failed. Please check the logs."
