name: 📦 Dependency Updates

on:
  schedule:
    # Check for updates every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - major
          - minor
          - patch

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Check for dependency updates
  check-updates:
    name: 🔍 Check for Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pip-review

      - name: 🔍 Check for outdated packages
        run: |
          pip-review --local --auto --verbose || true

      - name: 📋 Generate requirements report
        run: |
          pip list --outdated --format=json > outdated-packages.json
          pip list --format=json > current-packages.json

      - name: 📊 Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            outdated-packages.json
            current-packages.json

  # Security updates check
  security-updates:
    name: 🔒 Security Updates Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: 🔒 Check for security vulnerabilities
        run: |
          safety check --json --output security-vulnerabilities.json
          safety check --short-report

      - name: 🔒 Check for security updates
        run: |
          pip-audit --format=json --output=security-updates.json || true
          pip-audit --desc

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-vulnerabilities.json
            security-updates.json

  # Create pull request for updates
  create-pr:
    name: 🔄 Create Update PR
    runs-on: ubuntu-latest
    needs: [check-updates, security-updates]
    if: github.event_name == 'schedule' || github.event.inputs.update_type == 'all'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: 🔄 Update dependencies
        run: |
          # Create a new branch for updates
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Update requirements.txt with latest versions
          pip-compile --upgrade requirements.txt
          
          # Check if there are any changes
          if git diff --quiet; then
            echo "No dependency updates available"
            exit 0
          fi

      - name: 🔄 Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: '📦 Update dependencies'
          title: '📦 Automated Dependency Updates'
          body: |
            ## 📦 Automated Dependency Updates
            
            This PR contains automated updates to project dependencies.
            
            ### 🔍 Changes Made:
            - Updated outdated packages to their latest versions
            - Maintained compatibility with existing code
            - Applied security patches where available
            
            ### 🧪 Testing:
            - [ ] Run the test suite
            - [ ] Verify application functionality
            - [ ] Check for any breaking changes
            
            ### 📋 Review Checklist:
            - [ ] Review dependency changes
            - [ ] Test the application locally
            - [ ] Check for any security implications
            - [ ] Verify compatibility with production environment
            
            ---
            *This PR was created automatically by the dependency update workflow.*
          branch: automated-dependency-updates
          delete-branch: true

  # Notify about updates
  notify-updates:
    name: 📢 Notify Updates
    runs-on: ubuntu-latest
    needs: [check-updates, security-updates, create-pr]
    if: always()
    
    steps:
      - name: 📢 Notify about dependency updates
        run: |
          echo "📢 Dependency Update Notification"
          echo "================================"
          echo "🔍 Update Check: ${{ needs.check-updates.result }}"
          echo "🔒 Security Check: ${{ needs.security-updates.result }}"
          echo "🔄 PR Creation: ${{ needs.create-pr.result }}"
          echo "================================"
          
          if [ "${{ needs.create-pr.result }}" == "success" ]; then
            echo "✅ Pull request created for dependency updates"
          elif [ "${{ needs.create-pr.result }}" == "skipped" ]; then
            echo "ℹ️ No updates available or PR creation skipped"
          else
            echo "❌ Failed to create pull request for updates"
          fi

  # Dependency audit
  audit-dependencies:
    name: 📋 Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pip-licenses

      - name: 📋 Audit dependencies
        run: |
          echo "📋 Dependency Audit Report"
          echo "========================="
          
          # List all installed packages
          echo "📦 Installed packages:"
          pip list --format=table
          
          # Check for vulnerabilities
          echo "🔒 Security vulnerabilities:"
          pip-audit --desc || true
          
          # Check licenses
          echo "📄 Package licenses:"
          pip-licenses --format=table || true
          
          # Generate detailed report
          pip-audit --format=json --output=audit-report.json || true
          pip-licenses --format=json --output-file=licenses-report.json || true

      - name: 📊 Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports
          path: |
            audit-report.json
            licenses-report.json

  # Dependency summary
  dependency-summary:
    name: 📊 Dependency Summary
    runs-on: ubuntu-latest
    needs: [check-updates, security-updates, audit-dependencies]
    if: always()
    
    steps:
      - name: 📊 Generate dependency summary
        run: |
          echo "📊 Dependency Management Summary"
          echo "==============================="
          echo "🔍 Update Check: ${{ needs.check-updates.result }}"
          echo "🔒 Security Check: ${{ needs.security-updates.result }}"
          echo "📋 Audit: ${{ needs.audit-dependencies.result }}"
          echo "==============================="
          
          if [ "${{ needs.check-updates.result }}" == "success" ] && 
             [ "${{ needs.security-updates.result }}" == "success" ] && 
             [ "${{ needs.audit-dependencies.result }}" == "success" ]; then
            echo "🎉 All dependency checks completed successfully!"
          else
            echo "⚠️ Some dependency checks failed. Please review the results."
          fi
