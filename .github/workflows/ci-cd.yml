name: Online Bookstore CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage bcrypt
    
    - name: Run linting with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      run: |
        python -m pytest tests/test_models.py -v --tb=short
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_app_integration.py -v --tb=short
    
    - name: Run edge case and security tests
      run: |
        python -m pytest tests/test_edge_cases.py -v --tb=short
    
    - name: Generate coverage report
      run: |
        python -m coverage run -m pytest tests/
        python -m coverage report --include=app.py,models.py
        python -m coverage xml --include=app.py,models.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Run performance analysis
      run: |
        python performance_analysis.py
    
    - name: Test optimized code performance
      run: |
        # Test that optimizations work correctly
        python -c "
        from models_optimized import Cart, Book, ValidationUtils
        import timeit
        
        # Test optimized cart performance
        cart = Cart()
        book = Book('Test', 'Fiction', 10.99, 'test.jpg')
        cart.add_book(book, 100)
        
        # Should be fast with O(n) complexity
        time_taken = timeit.timeit(lambda: cart.get_total_price(), number=1000)
        print(f'Optimized cart performance: {time_taken:.6f}s for 1000 calls')
        assert time_taken < 0.1, 'Performance regression detected'
        
        # Test validation utilities
        assert ValidationUtils.validate_email('test@example.com') == True
        assert ValidationUtils.validate_email('invalid') == False
        assert ValidationUtils.validate_quantity('5') == 5
        print('‚úì All optimization tests passed')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install code quality tools
      run: |
        pip install pylint mypy black isort
        pip install -r requirements.txt
        pip install bcrypt
    
    - name: Run Black code formatting check
      run: |
        black --check --diff .
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .
    
    - name: Run MyPy type checking
      run: |
        mypy --ignore-missing-imports app.py models.py || true
    
    - name: Run Pylint code analysis
      run: |
        pylint --output-format=json app.py models.py > pylint-report.json || true
        pylint app.py models.py || true
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: pylint-report.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically deploy to a staging server"
        echo "All tests passed - ready for staging deployment"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "This would typically deploy to a production server"
        echo "All quality gates passed - ready for production deployment"
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          ## Changes included:
          - All tests passing ‚úÖ
          - Security scans clean ‚úÖ  
          - Code quality checks passed ‚úÖ
          - Performance optimizations verified ‚úÖ
          
          ## Test Results:
          - Unit Tests: ‚úÖ Passed
          - Integration Tests: ‚úÖ Passed  
          - Edge Case Tests: ‚úÖ Passed
          - Performance Tests: ‚úÖ Passed
          
        draft: false
        prerelease: false

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.code-quality.result == 'success'
      run: |
        echo "üéâ All CI/CD pipeline jobs completed successfully!"
        echo "‚úÖ Tests passed"
        echo "‚úÖ Security scan clean" 
        echo "‚úÖ Code quality checks passed"
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.code-quality.result == 'failure'
      run: |
        echo "‚ùå CI/CD pipeline failed"
        echo "Test result: ${{ needs.test.result }}"
        echo "Security scan result: ${{ needs.security-scan.result }}"
        echo "Code quality result: ${{ needs.code-quality.result }}"
        exit 1