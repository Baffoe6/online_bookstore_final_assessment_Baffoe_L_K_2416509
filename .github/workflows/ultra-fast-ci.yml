name: Ultra-Fast Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly dependency scan

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit

jobs:
  # Fast preliminary checks
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      python-matrix: ${{ steps.set-matrix.outputs.python-matrix }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Quick syntax check
      run: python -m py_compile **/*.py || true
    
    - name: Set Python matrix
      id: set-matrix
      run: |
        echo "python-matrix=[\"3.9\", \"3.10\", \"3.11\", \"3.12\"]" >> $GITHUB_OUTPUT

  # Parallel linting and security scanning
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 10
    
    strategy:
      matrix:
        check: ['lint', 'security', 'dependencies']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Cache quality tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: quality-${{ matrix.check }}-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint bandit safety mypy vulture complexity-report
    
    - name: Run linting checks
      if: matrix.check == 'lint'
      run: |
        echo "::group::Flake8 Analysis"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --format=github
        echo "::endgroup::"
        
        echo "::group::Pylint Analysis"  
        pylint --exit-zero --score=yes --reports=yes --output-format=colorized . || true
        echo "::endgroup::"
        
        echo "::group::MyPy Type Checking"
        mypy . --ignore-missing-imports --no-strict-optional || true
        echo "::endgroup::"
    
    - name: Security scanning
      if: matrix.check == 'security'
      run: |
        echo "::group::Bandit Security Scan"
        bandit -r . -f json -o bandit-report.json -ll
        bandit -r . -f txt || true
        echo "::endgroup::"
        
        echo "::group::Vulnerability Check"
        safety check --json --output safety-report.json || true
        safety check || true  
        echo "::endgroup::"
    
    - name: Dependency analysis
      if: matrix.check == 'dependencies'
      run: |
        echo "::group::Dead Code Detection"
        vulture . --min-confidence 80 || true
        echo "::endgroup::"
        
        echo "::group::Complexity Analysis"
        complexity-report . || true
        echo "::endgroup::"
    
    - name: Upload security reports
      if: matrix.check == 'security'
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Comprehensive testing with performance monitoring
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [quick-checks, code-quality]
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.quick-checks.outputs.python-matrix) }}
        test-category: ['unit', 'integration', 'security', 'performance']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Cache test dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: test-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-json-report pytest-benchmark pytest-xdist psutil
    
    - name: Run tests with coverage (${{ matrix.test-category }})
      run: |
        case "${{ matrix.test-category }}" in
          "unit")
            python -m pytest tests/test_models.py -v --cov=models --cov-report=xml:coverage-unit.xml --html=reports/unit-report.html --json-report --json-report-file=reports/unit-report.json -x
            ;;
          "integration") 
            python -m pytest tests/test_app_integration.py -v --cov=app --cov-report=xml:coverage-integration.xml --html=reports/integration-report.html --json-report --json-report-file=reports/integration-report.json -x
            ;;
          "security")
            python -m pytest tests/test_edge_cases.py::TestSecurityScenarios -v --cov-append --cov-report=xml:coverage-security.xml --html=reports/security-report.html --json-report --json-report-file=reports/security-report.json
            ;;
          "performance")
            python -m pytest tests/test_optimized_suite.py::TestOptimizedPerformance -v --benchmark-only --benchmark-json=reports/benchmark.json || true
            ;;
        esac
    
    - name: Performance regression check
      if: matrix.test-category == 'performance' && matrix.python-version == '3.11'
      run: |
        echo "::group::Performance Benchmarks"
        python performance_comparison.py
        echo "::endgroup::"
    
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.python-version }}-${{ matrix.test-category }}
        path: |
          reports/
          coverage-*.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-*.xml
        flags: ${{ matrix.test-category }}
        name: codecov-${{ matrix.test-category }}
        fail_ci_if_error: false

  # Performance monitoring and benchmarking  
  performance-monitoring:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install cProfile-pretty memory-profiler line-profiler py-spy
    
    - name: Memory profiling
      run: |
        echo "::group::Memory Usage Analysis"
        mprof run python performance_analysis.py
        mprof plot -o memory_profile.png
        echo "::endgroup::"
    
    - name: CPU profiling  
      run: |
        echo "::group::CPU Performance Analysis"
        python -m cProfile -o cpu_profile.prof performance_analysis.py
        echo "CPU profiling completed"
        echo "::endgroup::"
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-analysis
        path: |
          memory_profile.png
          cpu_profile.prof
          *.prof

  # Deployment readiness check
  deployment-check:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [test, performance-monitoring]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install gunicorn waitress
    
    - name: Test production server startup
      run: |
        echo "::group::Gunicorn Startup Test"
        timeout 30s gunicorn --bind 127.0.0.1:8000 app:app --daemon
        sleep 5
        curl -f http://127.0.0.1:8000/ || exit 1
        pkill gunicorn
        echo "::endgroup::"
    
    - name: Docker build test (if Dockerfile exists)
      run: |
        if [ -f Dockerfile ]; then
          echo "::group::Docker Build Test"
          docker build -t bookstore-test .
          docker run --rm -d -p 8080:8080 --name bookstore-container bookstore-test
          sleep 10
          curl -f http://localhost:8080/ || exit 1
          docker stop bookstore-container
          echo "::endgroup::"
        fi

  # Summary job for status checks
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [quick-checks, code-quality, test, deployment-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.quick-checks.result }}" == "success" && \
              "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              ("${{ needs.deployment-check.result }}" == "success" || "${{ needs.deployment-check.result }}" == "skipped") ]]; then
          echo "✅ All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "  Quick checks: ${{ needs.quick-checks.result }}"
          echo "  Code quality: ${{ needs.code-quality.result }}"
          echo "  Tests: ${{ needs.test.result }}"
          echo "  Deployment: ${{ needs.deployment-check.result }}"
          exit 1
        fi